#!/usr/bin/env python
from lxml import etree
import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
import sys
import os

WEBLATE_URL = "https://hosted.weblate.org"
PROJECT_SLUG = "gramophone"
COMPONENT_SLUG = "strings-xml"
API_TOKEN = os.getenv("WEBLATE_TOKEN")
headers = {
    "Authorization": f"Token {API_TOKEN}",
    "Accept": "application/json",
}

# Configure retry strategy
retry_strategy = Retry(
    total=3,
    backoff_factor=1,
    status_forcelist=[500, 502, 503, 504])
session = requests.Session()
adapter = HTTPAdapter(max_retries=retry_strategy)
session.mount("http://", adapter)
session.mount("https://", adapter)


def get_languages() -> list:
    url = f"{WEBLATE_URL}/api/components/{PROJECT_SLUG}/{COMPONENT_SLUG}/translations/"
    response = session.get(url, headers=headers, timeout=5)
    response.raise_for_status()  # Raise an error for bad responses
    languages = response.json().get('results')
    return languages


# Fetch all units
def get_units_list(language_code: str) -> list:
    units = []
    page_url = f"{
        WEBLATE_URL}/api/translations/{PROJECT_SLUG}/{COMPONENT_SLUG}/{language_code}/units/"

    print(f'\nGetting units of language code "{language_code}"... ', end="")
    while page_url:
        response = session.get(page_url, headers=headers, timeout=5)
        response.raise_for_status()
        data = response.json()
        units.extend(data["results"])
        page_url = data.get("next")
    print("Done.")

    return units


def delete_strings(xml_file, names_to_delete):
    """
    Deletes entire <string> elements from Android string resources XML
    while preserving all formatting, comments, and XML structure
    """
    # Create parser with full preservation settings
    parser = etree.XMLParser(
        remove_blank_text=False,
        remove_comments=False,
        remove_pis=False,
        strip_cdata=False,
        resolve_entities=False
    )

    tree = etree.parse(sys.argv[1] + '/' + xml_file, parser)
    root = tree.getroot()

    # Find all string elements
    print("  Deleting: ", end="")
    for elem in root.xpath('//string | //plurals | //string-array'):
        name = elem.get('name')
        if name in names_to_delete:
            # Remove the entire element
            parent = elem.getparent()
            parent.remove(elem)
            print(name, end=", ")
    print()

    original_encoding = tree.docinfo.encoding or 'utf-8'
    tree.write(
        xml_file,
        encoding=original_encoding,
        xml_declaration=True,
        pretty_print=False,
        with_comments=True,
        method="xml"
    )


def filter_translations(language: dict) -> None:
    units = get_units_list(language.get('language').get('code'))
    string_names = [unit.get('context')
                    for unit in units if unit.get('state') == 10]
    print("  Strings to delete: " + str(string_names))

    delete_strings(language.get("filename"), string_names)


if __name__ == "__main__":
    languages = get_languages()

    for language in languages:
        if not language.get('is_source'):
            filter_translations(language)

